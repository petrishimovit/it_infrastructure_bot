from cfg import *
import requests
import json
import datetime
import telebot
import time
from time import sleep
from telebot import types
from telebot import TeleBot, types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from collections import defaultdict
import threading
import pprint
import re
import traceback
import subprocess
import shlex
import socket
import os
import telebot
import telnetlib
import ipaddress
import sqlite3
import ast
import pyautogui
import pyscreeze
import psutil







bot = telebot.TeleBot(token)



'''–ü–ò–®–ï–ú –õ–û–ì –û–®–ò–±–û–ö –ò –¢–ü'''
def log(text):
    current_time = datetime.datetime.now()
    formatted_time = current_time.strftime("%Y-%m-%d %H:%M:%S")  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ %S –¥–ª—è —Å–µ–∫—É–Ω–¥
    with open('botlog.log', 'a+') as file:
        file.write(f'\n{formatted_time} - {text}')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è

log(text="–±–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

"""–°–¢–ê–¢–£–° –ü–û–î–ü–ò–°–ö–ò"""
def remind_status(date_str):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç datetime
    target_date = datetime.datetime.strptime(date_str, '%Y-%m-%d %H:%M')
    current_date = datetime.datetime.now()

    # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ü–µ–ª–µ–≤–æ–π –¥–∞—Ç–æ–π –∏ —Ç–µ–∫—É—â–µ–π
    time_difference = target_date - current_date

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤–æ –≤—Ä–µ–º–µ–Ω–∏
    if time_difference > datetime.timedelta(days=180):  # –±–æ–ª—å—à–µ 6 –º–µ—Å—è—Ü–µ–≤
        return '‚úÖ'
    elif datetime.timedelta(days=30) < time_difference <= datetime.timedelta(
            days=180):  # –º–µ–Ω—å—à–µ 6 –º–µ—Å—è—Ü–µ–≤ –∏ –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞
        return '‚ö†Ô∏è'
    else:  # –º–µ–Ω—å—à–µ –º–µ—Å—è—Ü–∞
        return '‚ùå'


"""–ò–ó –î–ê–¢–´ –§–û–†–ú–ê–¢–ê –î–î.–ú–ú.–ì–ì–ì–ì –≤ –ì–ì–ì–ì-–ú–ú-–ú–ú"""
def dd_mm_yyyy_to_yyyy_mm_dd(date_str):
    # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ —Ç–æ—á–∫–∞–º
    day, month, year = date_str.split('.')
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    return f"{year}-{month}-{day}"



"""–ê–ü–¢–ê–ô–ú –ì–õ–ê–í–ù–û–ì–û –°–ï–†–í–ï–†–ê"""
def getmainserveruptime():
    zabbix_url = zabbixurl
    zabbix_user = zabbix_log
    zabbix_password = zabbix_pass
    headers = {'Content-Type': 'application/json-rpc'}
    data = {
        "jsonrpc": "2.0",
        "method": "user.login",
        "params": {
            "username": zabbix_user,
            "password": zabbix_password
        },
        "id": 1
    }
    auth_token = requests.post(zabbix_url, headers=headers, data=json.dumps(data)).json()["result"]

    hostid = requests.post(zabbix_url, headers=headers, data=json.dumps({
        "jsonrpc": "2.0",
        "method": "host.get",
        "params": {
            "filter": {
                "host": [
                    "ALPHA"

                ]
            }
        },
        "auth": auth_token,
        "id": 1
    })).json()["result"][0]["hostid"]
    data_element = requests.post(zabbix_url, headers=headers, data=json.dumps({
        "jsonrpc": "2.0",
        "method": "item.get",
        "params": {
            "hostids": hostid,
        },
        "id": 3,
        "auth": auth_token
    })).json()["result"]
    for i in data_element:
        if i['name'] == 'Windows: Uptime':
            unix_time = int(i['lastvalue'])

            readable_time = datetime.datetime.fromtimestamp(unix_time)

            # √ç√†√∑√†√´√Æ Unix √Ω√Ø√Æ√µ√®
            epoch_start = datetime.datetime(1970, 1, 1)

            # √Ç√ª√∑√®√±√´√ø√•√¨ √∞√†√ß√≠√®√∂√≥
            time_difference = readable_time - epoch_start

            # √è√Æ√´√≥√∑√†√•√¨ √™√Æ√´√®√∑√•√±√≤√¢√Æ √§√≠√•√©, √∑√†√±√Æ√¢ √® √¨√®√≠√≥√≤
            days = time_difference.days
            seconds = time_difference.seconds
            hours = seconds // 3600
            minutes = (seconds % 3600) // 60

            # √î√Æ√∞√¨√†√≤√®√∞√≥√•√¨ √∞√•√ß√≥√´√º√≤√†√≤
            result = f"{days} –¥–Ω—è, {hours} —á–∞—Å–æ–≤, {minutes} –º–∏–Ω—É—Ç"
            return result



"""–ê–ü–¢–ê–ô–ú –£–°–¢–†–û–ô–°–¢–í–ê –ì–î–ï –•–û–°–¢–ò–¢–°–Ø –ë–û–¢"""
def get_uptime():
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    boot_time = psutil.boot_time()
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ datetime
    boot_time = datetime.datetime.fromtimestamp(boot_time)
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = datetime.datetime.now()
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–ø—Ç–∞–π–º
    uptime = current_time - boot_time
    return uptime



"""–ü–û–ì–û–î–ê –ì–û–†–û–î–ê –ö–û–¢–û–†–´–ô –•–û–¢–ò–ú"""
def weather():
    req = requests.get(f"http://api.weatherapi.com/v1/current.json?key={weatherapitoken}&q={city}").json()
    temp = int(req["current"]["temp_c"])
    text = f"–ü–æ–≥–æ–¥–∞ –≤ {cityindex}: {temp} ¬∞C"
    if temp <= 0:
        text = f"–ü–æ–≥–æ–¥–∞ –≤ {cityindex}: {temp} ¬∞C ‚ùÑÔ∏è"
    if temp > 0 and temp <= 20:
        text = f"–ü–æ–≥–æ–¥–∞ –≤ {cityindex}: {temp} ¬∞C üå§Ô∏è"
    if temp >= 20:
        text = f"–ü–æ–≥–æ–¥–∞ –≤ {cityindex}: {temp} ¬∞C ‚òÄÔ∏è"
    return text






"""–î–õ–Ø –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô –í–´–ß–ï–°–õ–Ø–ï–ú –î–ê–¢–£ –ö–û–ì–î–ê –ù–£–ñ–ù–û –ú–ï–°–°–ï–î–ñ –ü–†–ï–°–õ–ê–¢–¨"""
def calculate_reminder_date(start_date_str, subscription_duration, reminder_time):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –≤ –æ–±—ä–µ–∫—Ç datetime
    start_date = datetime.datetime.strptime(start_date_str, '%Y-%m-%d')

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏
    duration_mapping = {
        "1 –¥–µ–Ω—å": 1,
        "3 –¥–Ω—è": 3,
        "1 –Ω–µ–¥–µ–ª—è": 7,
        "3 –º–µ—Å—è—Ü–∞": 90,
        "6 –º–µ—Å—è—Ü–µ–≤": 180,
        "12 –º–µ—Å—è—Ü–µ–≤": 365,
        "2 –≥–æ–¥–∞": 730,
        "3 –≥–æ–¥–∞": 1095
    }

    if subscription_duration in duration_mapping:
        end_date = start_date + datetime.timedelta(days=duration_mapping[subscription_duration])
    else:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_mapping = {
        "1 –º–µ—Å—è—Ü": 30,
        "2 –Ω–µ–¥–µ–ª–∏": 14,
        "3 –¥–Ω—è": 3
    }

    if reminder_time in reminder_mapping:
        reminder_date = end_date - datetime.timedelta(days=reminder_mapping[reminder_time])
    else:
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞—Ç—É –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    return f"{reminder_date.strftime('%Y-%m-%d')}"












"""IP –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–†"""
def get_network_info(ip, subnet_mask):
    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–µ—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ IP –∏ –º–∞—Å–∫–∏
    network = ipaddress.ip_network(f"{ip}/{subnet_mask}", strict=False)

    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ç–∏
    network_address = str(network.network_address)
    # –ü–æ–ª—É—á–∞–µ–º CIDR
    cidr = network.prefixlen
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–¥—Ä–µ—Å
    first_available = str(network.network_address + 1)
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–¥—Ä–µ—Å
    last_available = str(network.broadcast_address - 1)
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    num_addresses = network.num_addresses - 2  # –ò—Å–∫–ª—é—á–∞–µ–º –∞–¥—Ä–µ—Å —Å–µ—Ç–∏ –∏ —à–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω—ã–π

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
    result = (
        f"–ê–¥—Ä–µ—Å —Å–µ—Ç–∏: {network_address}\n"
        f"–ú–∞—Å–∫–∞: {str(network.netmask)}\n"
        f"CIDR: {cidr}\n"
        f"–ü–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–¥—Ä–µ—Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {first_available}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∞–¥—Ä–µ—Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞: {last_available}\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {num_addresses}"
    )

    return result



def get_current_time():
    now = datetime.datetime.now()  # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    return now.strftime("%H:%M:%S")  # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Å—Ç—Ä–æ–∫—É
"""NSLOOKUP –î–û–ú–ï–ù–ù–û–ì–û –ò–ú–ï–ù–ò"""
def nslookup(domain):
    try:
        # –ü–æ–ª—É—á–∞–µ–º IP-–∞–¥—Ä–µ—Å–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–æ–º–µ–Ω–∞
        ip_addresses = socket.gethostbyname_ex(domain)
        return ip_addresses[2]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤
    except socket.gaierror as e:
        log(f"–û—à–∏–±–∫–∞: {e}")
        return f"–û—à–∏–±–∫–∞: {e}"


"""–ü–û TELNET –ü–†–û–í–ï–†–Ø–ï–ú –û–¢–ö–†–´–¢ –õ–ò –ü–û–†–¢"""
def check_port(ip, port):
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ 5 —Å–µ–∫—É–Ω–¥
        tn = telnetlib.Telnet(ip, port, timeout=5)
        tn.close()
        return f"IP-–∞–¥—Ä–µ—Å: {ip} –ü–æ—Ä—Ç: {port} ‚úÖ"
    except Exception as e:
        return f"IP-–∞–¥—Ä–µ—Å: {ip} –ü–æ—Ä—Ç: {port} ‚ùå"
"""–ü–£–¢–¨ –î–û IP"""
def tracert(ip_address):
    try:
        # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã tracert
        result = subprocess.run(['tracert', ip_address], capture_output=True, text=True)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫–∏
        if result.returncode == 0:
            return result.stdout.encode('windows-1251', errors='replace').decode('cp866', errors='replace')
        else:
            return f"–û—à–∏–±–∫–∞: {result.stderr}"
   # –í—ã–≤–æ–¥ –æ—à–∏–±–∫–∏
    except Exception as _ex:
        log(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {_ex}")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {_ex}"




"""–ü–ò–ù–ì –•–û–°–¢–ê"""
def ping(host):
    if "in" in host:
        host = get_ip(host)
        if host is None:
            return None

    command = f"ping -n 4 {host}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º -c –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–∫–µ—Ç–æ–≤
    process = subprocess.Popen(shlex.split(command), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    output, _ = process.communicate(timeout=100)

    output_decoded = output.decode('cp866')
    return output_decoded





"""–ü–†–ï–û–ë–†–ê–ó–£–ï–¢ –ù–ê–°–¢–û–Ø–©–ï–ï –í–†–ï–ú–Ø –í –§–û–†–ú–ê–¢ –ß–ò–°–õ–û –ù–ê–í–ó–ê–ù–ò–ï –ú–ï–°–Ø–¶–ê –•–•:–•–•"""
def current_time_jata():
    months = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]

    dt = datetime.datetime.now()
    day = dt.day
    month = months[dt.month - 1]  # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
    year = dt.year
    hour = dt.hour
    minute = dt.minute

    return f"{day} {month} {year} {hour:02}:{minute:02}"

"""–ü–†–ï–û–ë–†–ê–ó–£–ï–¢ UNIX –í–†–ï–ú–Ø –í –§–û–†–ú–ê–¢ –ß–ò–°–õ–û –ù–ê–í–ó–ê–ù–ò–ï –ú–ï–°–Ø–¶–ê –•–•:–•–•"""
def unix_to_jata(unix_time):
    months = [
        "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
        "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
    ]

    dt = datetime.datetime.fromtimestamp(int(unix_time))
    day = dt.day
    month = months[dt.month - 1]  # –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –º–µ—Å—è—Ü–µ–≤ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 0
    year = dt.year
    hour = dt.hour
    minute = dt.minute

    return f"{day} {month} {year} {hour:02}:{minute:02}"


"""UNIX –í–û –í–†–ï–ú–Ø –î–õ–Ø –ó–ê–ü–†–û–°–û–í –ö –ê–†–•–ò–í–£ MACROSCOP"""
def unix_to_formatted_time(unix_time):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Unix-–≤—Ä–µ–º—è –≤ –æ–±—ä–µ–∫—Ç datetime
    dt_object = datetime.datetime.fromtimestamp(int(unix_time))
    # –í—ã—á–∏—Ç–∞–µ–º 20 –º–∏–Ω—É—Ç
    dt_object -= datetime.timedelta(minutes=20)
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç datetime –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    formatted_time = dt_object.strftime("%d.%m.%Y %H:%M:%S")
    return formatted_time




"""–í–û–ó–í–†–ê–©–ê–ï–¢ –ü–†–û–ë–õ–ï–ú–´ –ò–ó ZABBIX
–í –§–û–†–ú–ê–¢–ï
{–ò–ú–Ø –•–û–°–¢–ê:[–í–†–ï–ú–Ø –í UNIX , –ù–ê–ó–í–ê–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´]}"""
def get_problems_from_zabbix():
    zabbix_url = zabbixurl
    zabbix_user = zabbix_log
    zabbix_password = zabbix_pass

    headers = {'Content-Type': 'application/json-rpc'}
    data = {
        "jsonrpc": "2.0",
        "method": "user.login",
        "params": {
            "username": zabbix_user,
            "password": zabbix_password
        },
        "id": 1
    }
    auth_token = requests.post(zabbix_url, headers=headers, data=json.dumps(data)).json()["result"]
    try:
        groupid = requests.post(zabbix_url, headers=headers, data=json.dumps({
            "jsonrpc": "2.0",
            "method": "hostgroup.get",
            "params": {
                "output": "extend",
                "filter": {
                    "name": [
                        hostgroup_for_problems
                    ]
                }
            },
            "auth": auth_token,
            "id": 1
        })).json()["result"][0]["groupid"]
        hostids = list()
        hosts = requests.post(zabbix_url, headers=headers, data=json.dumps({
            "jsonrpc": "2.0",
            "method": "host.get",
            "params": {
                "groupids": [groupid]
            },
            "auth": auth_token,
            "id": 1
        })).json()["result"]
        for hostdescription in hosts:
            hostid = hostdescription["hostid"]
            hostids.append(hostid)

        problems = requests.post(zabbix_url, headers=headers, data=json.dumps({
            "jsonrpc": "2.0",
            "method": "problem.get",
            "params": {
                "selectHosts": "extend",
                "hostids": hostids,

            },

            "auth": auth_token,
            "id": 1
        })).json()["result"]
        eventids = list()
        for i in problems:
            eventids.append(i["eventid"])
        events = requests.post(zabbix_url, headers=headers, data=json.dumps({
            "jsonrpc": "2.0",
            "method": "event.get",
            "params": {
                "selectHosts": "extend",
                "eventids": eventids,

            },

            "auth": auth_token,
            "id": 1
        })).json()["result"]

        readylist_key = list()

        for info in events:
            # print(info)

            for hostlist in info["hosts"]:
                readylist_key.append(hostlist["host"])



        readylist_object = list()
        for i in problems:
            list_of_values = [i["clock"],i["name"]]

            readylist_object.append(list_of_values)

        alllist = dict(zip(readylist_key, readylist_object))
        alllist = dict(reversed(alllist.items()))
        return alllist


    except Exception as _ex:
        log(_ex)
        traceback.print_exc()
        print(_ex)



"""IP –ê–î–†–ï–° –ü–û ZABBIX –ò–ú–ï–ù–ò"""
def get_ip(host):
    zabbix_url = zabbixurl
    zabbix_user = zabbix_log
    zabbix_password = zabbix_pass
    headers = {'Content-Type': 'application/json-rpc'}
    data = {
        "jsonrpc": "2.0",
        "method": "user.login",
        "params": {
            "username": zabbix_user,
            "password": zabbix_password
        },
        "id": 1
    }
    auth_token = requests.post(zabbix_url, headers=headers, data=json.dumps(data)).json()["result"]

    groupid = requests.post(zabbix_url, headers=headers, data=json.dumps({
        "jsonrpc": "2.0",
        "method": "hostgroup.get",
        "params": {
            "output": "extend",
            "filter": {
                "name": [
                    "Matrix-Home_Group"
                ]
            }
        },
        "auth": auth_token,
        "id": 1
    })).json()["result"][0]["groupid"]

    hostids = list()
    hosts = requests.post(zabbix_url, headers=headers, data=json.dumps({
        "jsonrpc": "2.0",
        "method": "host.get",
        "params": {
            "selectInterfaces": ['ip', 'port', 'dns'],
            "groupids": [groupid]

        },
        "auth": auth_token,
        "id": 1
    })).json()["result"]
    for i in hosts:
        if i["host"] == host:
            return i["interfaces"][0]["ip"]
    return None

mainbot_menu = ""
"""/START –í–´–î–ê–ï–ú –ö–ù–û–ü–ö–ò"""
@bot.message_handler(func=lambda message: message.text == "/start" or message.text == comeback)
def start(message):
    global mainbot_menu
    log(f"{message.from_user.username} —Å–¥–µ–ª–∞–ª /start")
    chat_id = message.chat.id
    text = f"<b>–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> "
    mainbot_menu = types.ReplyKeyboardMarkup()
    button_network_map = types.KeyboardButton(network_map)
    button_cameras_List = types.KeyboardButton(cameraslist)
    button_tools = types.KeyboardButton(tools)
    button_reminds = types.KeyboardButton(reminders)
    button_files = types.KeyboardButton(files)
    button_list = types.KeyboardButton(commands_list)
    mainbot_menu.row(button_network_map)
    mainbot_menu.row(button_cameras_List,button_files)
    mainbot_menu.row(button_tools)
    mainbot_menu.row(button_reminds,button_list)
    if str(chat_id) in whocanusebot:
        mesg = bot.send_message(chat_id, text, reply_markup=mainbot_menu, parse_mode="HTML")
        sentd = bot.send_message(chat_id, "-------",)
        try:
            with open('pinnedmessageinfo.txt', 'r') as file:
                file = file.readlines()
                bot.delete_message(file[1], file[0])
        except Exception as _ex:
            log(_ex)
            pass

        with open('pinnedmessageinfo.txt', 'w') as file:
            file.write(f'{sentd.message_id}\n{sentd.chat.id}')

        bot.pin_chat_message(chat_id=message.chat.id, message_id=sentd.id)
        threading.Thread(target=pinnedmessage, args=(chat_id, sentd.message_id)).start()
    else:
        log(f"{message.from_user.username} —Å–¥–µ–ª–∞–ª /start –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

def pinnedmessage(chat_id,message_id, ):
    while True:
        sleep(120)
        texts = f"{weather()}|ALPHA uptime: {getmainserveruptime()}"
        bot.edit_message_text(chat_id=chat_id,message_id=message_id,text=texts)


"""–ò–î–ï–ù–¢–ò–ò–ö–ê–¢–û–† –ü–û–¢–û–ö–ê –ü–û –ò–ú–ï–ù–ò –í MACROSCOP"""
def get_channel_id(camera_name):
    req = requests.get(f"http://10.9.8.4:8080/configex?login={macroscop_log}&password={macroscop_pass}&responsetype=json")

    for allinfo_about_device in req.json()["Channels"]:
        if camera_name == allinfo_about_device["Name"]:
            return allinfo_about_device["Id"]
    return "–ù–µ—Ç —Ç–∞–∫–æ–π –∫–∞–º–µ—Ä—ã"




"""–ö–ê–î–† –ò–ó –ö–ê–ú–ï–†–´ –ò –ò–ù–§–ê –û –ù–ï–ô"""
@bot.message_handler(func=lambda message: "üéûÔ∏è" in message.text)
def send_realtime_camera(message):
    log(f"{message.from_user.username} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–∞–º–µ—Ä—É {button_zabbix_name[message.text]}")
    chat_id = message.chat.id
    zabbix_name = button_zabbix_name[message.text]
    macroscop_name = button_macroscop_name[message.text]
    cam_caption = (f"<b>–ò–º—è –∫–∞–º–µ—Ä—ã</b>: {macroscop_name}\n"
                     f"<b>IP-–∞–¥—Ä–µ—Å –∫–∞–º–µ—Ä—ã</b> {get_ip(zabbix_name)}\n")
    channelid = get_channel_id(macroscop_name)

    if zabbix_name in get_problems_from_zabbix().keys():
        cam_caption += (f"<b>–°—Ç–∞—Ç—É—Å –∫–∞–º–µ—Ä—ã</b>: ‚õî –ö–∞–º–µ—Ä–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç\n"
                        f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞</b>: {unix_to_jata(get_problems_from_zabbix()[zabbix_name][0])}\n"
                        )
        online = False
        macro_time = unix_to_formatted_time(get_problems_from_zabbix()[zabbix_name][0])


        req = requests.get(

         f"http://10.9.8.4:8080/site?login={macroscop_log}&password={macroscop_pass}&channelid={channelid}&withcontenttype=true&mode=archive&starttime={macro_time}&resolutionx=640&resolutiony=480")
    else:
        cam_caption += (f"<b>–°—Ç–∞—Ç—É—Å –∫–∞–º–µ—Ä—ã</b>: ‚úÖ –û–ö\n"
                        f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∫–∞–¥—Ä–∞</b>: {current_time_jata()}")
        online = True
        req = requests.get(
              f"http://10.9.8.4:8080/site?login={macroscop_log}&password={macroscop_pass}&channelid={channelid}&withcontenttype=true&mode=realtime&&resolutionx=640&resolutiony=480")

    with open(f"{zabbix_name}.jpg", "wb") as file:
        file.write(req.content)
    with open(f"{zabbix_name}.jpg", "rb") as file:
        if str(chat_id) in whocanusebot:
            bot.send_photo(photo=file, chat_id=chat_id, caption=cam_caption, parse_mode="HTML")
            
            

        






"""–ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –í –ú–ï–ù–Æ –ö–ê–ú–ï–†"""
@bot.message_handler(func=lambda message: message.text == cameraslist )
def move_to_cameraslist(message):
    log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ –º–µ–Ω—é –∫–∞–º–µ—Ä")
    chat_id = message.chat.id
    text = "<b>–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ —Å–ø–∏—Å–æ–∫ –∫–∞–º–µ—Ä</b>"
    cameras_menu = types.ReplyKeyboardMarkup()
    button_entrance = types.KeyboardButton(cam_entrance)
    button_childrens = types.KeyboardButton(cam_childrens)
    button_yard = types.KeyboardButton(cam_yard)
    button_kidsprofi = types.KeyboardButton(cam_kidsprofi)
    button_comeback  = types.KeyboardButton(comeback)
    cameras_menu.row(button_entrance,button_childrens)
    cameras_menu.row(button_yard, button_kidsprofi)
    cameras_menu.row(button_comeback)

    if str(chat_id) in whocanusebot:
        mesg = bot.send_message(chat_id, text, reply_markup=cameras_menu, parse_mode="HTML")
    else:
        log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ –º–µ–Ω—é –∫–∞–º–µ—Ä –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


"""–ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –í –ú–ï–ù–Æ –ò–ù–°–¢–†–£–ú–ï–ù–¢–´"""
@bot.message_handler(func=lambda message: message.text == tools )
def move_to_tools(message):
    log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
    chat_id = message.chat.id
    text = "<b>–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤</b>"
    tools_menu = types.ReplyKeyboardMarkup()
    button_ping = types.KeyboardButton(ping_s)
    button_ping_t = types.KeyboardButton(ping_t)
    button_nslookup = types.KeyboardButton(nslookup_1)
    button_tracert = types.KeyboardButton(tracer_t)
    button_telnet = types.KeyboardButton(telnet)
    button_ip_calculator = types.KeyboardButton(ipcalc)
    button_comeback  = types.KeyboardButton(comeback)
    tools_menu.row(button_ping,button_ping_t)
    tools_menu.row( button_tracert,button_telnet)
    tools_menu.row(button_nslookup,button_ip_calculator)
    tools_menu.row(button_comeback)
    if str(chat_id) in whocanusebot:
        mesg = bot.send_message(chat_id, text, reply_markup=tools_menu, parse_mode="HTML")
    else:
        log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ –º–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")


"""–ü–ò–ù–ì–£–ï–ú –•–û–°–¢"""
@bot.message_handler(func=lambda message: message.text == ping_s)
def welcome_ip(message):
    log(f"{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É –ø–∏–Ω–≥")
    chat_id = message.chat.id
    if str(chat_id) in whocanusebot:
        mesg = bot.send_message(chat_id, "–ß—Ç–æ –ø–∏–Ω–≥–æ–≤–∞—Ç—å ? (IP-–∞–¥—Ä–µ—Å/–∏–º—è —É–∑–ª–∞)")
        bot.register_next_step_handler(mesg, sendping)
    else:

        log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–∏–Ω–≥–∞–Ω—É—Ç—å –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return None



def sendping(message):
    pings = str(ping(message.text))

    if "4 received" in pings or "–ø–æ–ª—É—á–µ–Ω–æ = 4" in pings:
        pings = (f"–°—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞ - ‚úÖOK\n-----------------------\n"
                 f"{pings}")
    elif "100% packet loss" in pings or "100% –ø–æ—Ç–µ—Ä—å" in pings :
        pings = (f"–°—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞ - ‚ùå –•–æ—Å—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç\n-----------------------\n"
                 f"{pings}")
    elif pings == "":
        bot.send_message(message.chat.id, '–ü–∏–Ω–≥ –¥–∞–Ω–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞/—Ö–æ—Å—Ç–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.')
    else:
        pings = (f"–°—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞ - ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤\n-----------------------\n{pings}")
    bot.send_message(message.chat.id, pings)

ip_calc = ""
subnet_mask = ""

@bot.message_handler(func=lambda message: message.text == ipcalc)
def welcone_ipcalc(message):
    chat_id = message.chat.id
    global ip_calc
    global subnet_mask
    if str(chat_id) in whocanusebot:
        mesg = bot.send_message(chat_id, "<b>–í–≤–µ–¥–∏—Ç–µ IP-–ê–¥—Ä–µ—Å</b>:",
                                parse_mode="HTML")
        log(f"{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª ip-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
        bot.register_next_step_handler(mesg, how_ip)
    else:

        log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ip-–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return None

def how_ip(message):
    chat_id = message.chat.id
    global ip_calc
    global subnet_mask
    ip_calc = message.text
    mesg = bot.send_message(chat_id, "<b>–í–≤–µ–¥–∏—Ç–µ –º–∞—Å–∫—É</b>:",
                            parse_mode="HTML")
    bot.register_next_step_handler(mesg,send_net_info)
def send_net_info(message):
    chat_id = message.chat.id
    global ip_calc
    global subnet_mask
    subnet_mask = message.text
    net_status = get_network_info(ip_calc,subnet_mask)
    bot.send_message(chat_id,net_status)








"""–ü–û–°–¢–ê–í–ò–¢–¨ –ù–ê –ü–ò–ù–ì"""
@bot.message_handler(func=lambda message: message.text == ping_t)
def start_ping(message):
    chat_id = message.chat.id
    if str(chat_id) in whocanusebot:
        mesg = bot.send_message(message.chat.id, "–ß—Ç–æ –ø–∏–Ω–≥–æ–≤–∞—Ç—å ? (IP-–∞–¥—Ä–µ—Å/–Ω–æ–º–µ—Ä –∫–∞–º–µ—Ä—ã/–∏–º—è —É–∑–ª–∞)"
                                                 "")
        log(f"{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∏–Ω–≥")
        bot.register_next_step_handler(mesg, pinging)
    else:

        log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∏–Ω–≥ –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return None

def pinging(message):
    if "in" in message.text:
        pingname = get_ip(message.text)
    else:
        pingname = message.text


    mesg = bot.send_message(message.chat.id,text=f"–ü–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ –ø–∏–Ω–≥ {message.text}\n"
                                                 f"–ë—É–¥—É –ø–∏–Ω–≥–æ–≤–∞—Ç—å 2 —á–∞—Å–∞ \n"
                                      f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ —É–∑–µ–ª —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω,—è —Å—Ä–∞–∑—É —Å–æ–æ–±—â—É –≤ —á–∞—Ç!")
    if pingname == None:
        bot.edit_message_text(chat_id=mesg.chat.id, message_id=mesg.id,
                              text=f"–£–∑–ª–∞ {message.text} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ")
    time = 0
    pings = ping(message.text)
    if pings == "" :
        mesg = bot.edit_message_text(chat_id=mesg.chat.id, message_id=mesg.id,
                                     text=f"–£–∑–ª–∞ {message.text} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ")
        checkping = True
    else:
        checkping = False

    while time < 7200 and checkping == False :
        pings = ping(pingname)

        if ("4 received" in pings or "3 received" in pings or "2 received" in pings or "1 received" in pings) and time < 30 or ("–ø–æ–ª—É—á–µ–Ω–æ = 4" in pings or "–ø–æ–ª—É—á–µ–Ω–æ = 3" in pings or "–ø–æ–ª—É—á–µ–Ω–æ = 2" in pings or "–ø–æ–ª—É—á–µ–Ω–æ = 1" in pings) and time < 30:
            mesg = bot.edit_message_text(chat_id=mesg.chat.id, message_id=mesg.id,
                                         text=f"–£–∑–µ–ª {message.text} –ø–∏–Ω–≥—É–µ—Ç—Å—è —É–∂–µ —Å–µ–π—á–∞—Å! ‚úÖ\n"
                                              f"-----------------\n"
                                              f"{pings}")
            pinged = True
            break
        elif ("4 received" in pings or "3 received" in pings or "2 received" in pings or "1 received" in pings) and time > 30 or ("–ø–æ–ª—É—á–µ–Ω–æ = 4" in pings or "–ø–æ–ª—É—á–µ–Ω–æ = 3" in pings or "–ø–æ–ª—É—á–µ–Ω–æ = 2" in pings or "–ø–æ–ª—É—á–µ–Ω–æ = 1" in pings) and time > 30:
            mesg = bot.edit_message_text(chat_id=mesg.chat.id, message_id=mesg.id,
                                         text=f"–£–∑–µ–ª {message.text} –Ω–∞—á–∞–ª –ø–∏–Ω–≥–æ–≤–∞—Ç—å—Å—è! ‚úÖ\n"
                                              f"-----------------\n"
                                              f"{pings}")
            pinged = True
            break
        elif "100% packet loss" in pings or "100% –ø–æ—Ç–µ—Ä—å" in pings:
            pings = (f"–°—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞ - ‚ùå –•–æ—Å—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç\n-----------------------\n"
                     f"{pings}")
        else:
            pings = (f"–°—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞ - ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤\n-----------------------\n{pings}")
        time += 10
        sleep(10)
    if pinged != True:
        mesg = bot.edit_message_text(chat_id=mesg.chat.id, message_id=mesg.id,
                                    text=f"–£–∑–µ–ª {message.text} —Ç–∞–∫ –∏ –Ω–µ –∑–∞–ø–∏–Ω–≥–æ–≤–∞–ª—Å—è! –Ø –ø–∏–Ω–≥–æ–≤–∞–ª —Ü–µ–ª—ã—Ö 3 —á–∞—Å–∞")





"""TRACERT –î–û IP"""
@bot.message_handler(func=lambda message: message.text == tracer_t)
def welcome_tracert(message):
    chat_id = message.chat.id

    if str(chat_id) in whocanusebot:
        mesg = bot.send_message(chat_id, "<b>–ö —á–µ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç</b> ? (IP-–∞–¥—Ä–µ—Å/–ò–º—è —É–∑–ª–∞)",
                                parse_mode="HTML")
        bot.register_next_step_handler(mesg, sendtracert)
        log(f"{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª tracer_t")
    else:

        log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tracert –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return None
ip = ""
port = ""

def sendtracert(message):
    chat_id = message.chat.id
    text = f"–ü—É—Ç—å –¥–æ {message.text}\n{tracert(message.text)}"
    bot.send_message(chat_id=chat_id,text=text,)

"""TELNET –ü–†–û–í–ï–†–Ø–ï–ú –î–û–°–¢–£–ü–ù–û–°–ú–¢–¨ –ü–û–†–¢–ê"""
@bot.message_handler(func=lambda message: message.text == telnet)
def welcone_telnet(message):
    log(f"{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª telnet")
    chat_id = message.chat.id
    global ip
    global port
    mesg = bot.send_message(chat_id, "<b>–í–≤–µ–¥–∏—Ç–µ IP-–ê–¥—Ä–µ—Å</b>:",
                           parse_mode="HTML")
    bot.register_next_step_handler(mesg, how_port)
def how_port(message):
    chat_id = message.chat.id
    global ip
    global port
    ip = message.text
    mesg = bot.send_message(chat_id, "<b>–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç</b>:",
                            parse_mode="HTML")
    bot.register_next_step_handler(mesg, send_port_status)
def send_port_status(message):
    chat_id = message.chat.id
    global ip
    global port
    port = message.text
    port_status = check_port(ip,port)
    bot.send_message(chat_id,port_status)




"""NSLOOKUP """
@bot.message_handler(func=lambda message: message.text == nslookup_1)
def what_domain_name(message):
    log(f"{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª nslookup")
    chat_id = message.chat.id
    text = "<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –¥–æ–º–µ–Ω–∞:</b>"

    if str(chat_id) in whocanusebot:
        mesg = bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")
        bot.register_next_step_handler(mesg, sendnslookup)
        log(f"{message.from_user.username} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª nslookup")
    else:
        log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏–ø–æ–ª—å–∑–æ–≤–∞—Ç—å nslookup –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return None

def sendnslookup(message):
    chat_id = message.chat.id
    text = (f"<b>IP-–∞–¥—Ä–µ—Å–∞  –¥–ª—è {message.text}</b>:\n{nslookup(message.text)}")
    mesg = bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML")


"""–ü–ï–†–ï–ú–ï–©–ï–ù–ò–ï –í –ú–ï–ù–Æ –§–ê–ô–õ–´"""
@bot.message_handler(func=lambda message: message.text == files )
def move_to_files(message):
    log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ –º–µ–Ω—é —Ñ–∞–π–ª–æ–≤")
    chat_id = message.chat.id
    text = "<b>–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ –º–µ–Ω—é —Ñ–∞–π–ª–æ–≤</b>"
    files_menu = types.ReplyKeyboardMarkup()
    button_download = types.KeyboardButton(download_file)
    button_upload_file = types.KeyboardButton(upload_file)
    button_delete_file = types.KeyboardButton(delete_file)


    button_comeback  = types.KeyboardButton(comeback)
    files_menu.row(button_download,button_upload_file)
    files_menu.row(button_delete_file)
    files_menu.row(button_comeback)
    if str(chat_id) in whocanusebot:
        mesg = bot.send_message(chat_id=chat_id, text=text, parse_mode="HTML",reply_markup=files_menu)

        log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ –º–µ–Ω—é —Ñ–∞–π–ª–æ–≤")
    else:
        log(f"{message.from_user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è –≤ –º–µ–Ω—é —Ñ–∞–π–ª–æ–≤ –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return None




"""–ü–ï–†–ï–ú–ï–©–ê–ï–ú–°–Ø –í –†–ê–ë–û–ß–£–Æ –î–ò–†–ï–ö–¢–û–†–ò–Æ –ò –ñ–î–ï–ú –û–¢–í–ï–¢–ê –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ß–¢–û–ë –û–ù –°–ö–ê–ß–ê–õ –§–ê–ô–õ"""
@bot.message_handler(func=lambda message: message.text == download_file)
def move_to_files_downloads(message):
    log(f"{message.from_user.username} —Å–∫–∞—á–∞–ª —Ñ–∞–π–ª")
    files = []
    chat_id = message.chat.id
    files += os.listdir(path_to_files)
    text = (f"<b>–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é</b>\n")
    for i in files:
        text += f"\n{i}\n"
    mesg = bot.send_message(chat_id, text, parse_mode="HTML")
    question_text = "<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏</b>:"

    mesg = bot.send_message(chat_id,question_text,parse_mode="HTML")
    bot.register_next_step_handler(mesg,sendfile)



"""–®–õ–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ –§–ê–ô–õ"""
def sendfile(message):
    filename = message.text
    chat_id = message.chat.id
    try:
        bot.send_document(chat_id, open(fr"{path_to_files}\{filename}", "rb"))

    except Exception as _ex:
        log(_ex)
        text = "<b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞</b>"
        bot.send_message(chat_id, text,parse_mode="HTML")





"""–ü–ï–†–ï–ú–ï–©–ê–ï–ú–°–Ø –í –†–ê–ë–û–ß–£–Æ –î–ò–†–ï–ö–¢–û–†–ò–Æ –ò –ñ–î–ï–ú –û–¢–í–ï–¢–ê –û–¢ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ß–¢–û–ë –û–ù –£–î–ê–õ–ò–õ –§–ê–ô–õ"""
@bot.message_handler(func=lambda message: message.text == delete_file)
def move_to_files(message):
    log(f"{message.from_user.username} —É–¥–∞–ª–∏–ª —Ñ–∞–π–ª")
    files = []
    chat_id = message.chat.id
    files += os.listdir(path_to_files)
    text = (f"<b>–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é</b>\n")

    for i in files:
        text += f"\n{i}\n"
    mesg = bot.send_message(chat_id, text, parse_mode="HTML")
    question_text = "<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è</b>:"

    if str(chat_id) in whocanusebot:

        mesg = bot.send_message(chat_id, question_text, parse_mode="HTML")
        bot.register_next_step_handler(mesg, deletefile)
        log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ –º–µ–Ω—é —Ñ–∞–π–ª–æ–≤")
    else:

        log(f"{message.from_user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return None



"""–£–î–ê–õ–Ø–ï–ú –§–ê–ô–õ –ò–ó –î–ò–†–ï–ö–¢–û–†–ò–ò"""
def deletefile(message):
    filename = message.text
    chat_id = message.chat.id
    text = f"–§–∞–π–ª <b>{filename}</b> –±—ã–ª —É–¥–∞–ª–µ–Ω"
    try:
        os.remove(fr"{path_to_files}\{filename}")
        bot.send_message(chat_id, text, parse_mode="HTML")

    except:
        text = "<b>–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞</b>"
        bot.send_message(chat_id, text,parse_mode="HTML")




"""–ó–ê–ü–†–ê–®–ò–í–ê–ï–ú –§–ê–ô–õ –£ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø"""
@bot.message_handler(func=lambda message: message.text == upload_file)
def ask_for_file(message):
    log(f"{message.from_user.username} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª")
    chat_id = message.chat.id
    text = "<b>–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª</b>"
    bot.send_message(chat_id, text,parse_mode="HTML")



"""–ñ–î–ï–ú –§–ê–ô–õ"""
@bot.message_handler(content_types=['document'])
def handle_document(message):
    log(f"{message.from_user.username} –∑–∞–≥—Ä—É–∑–∏–ª —Ñ–∞–π–ª")
    chat_id = message.chat.id
    text = "<b>–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω</b>"
    file_info = bot.get_file(message.document.file_id)
    downloaded_file = bot.download_file(file_info.file_path)

    # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å, –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª
    file_path = os.path.join(path_to_files, message.document.file_name)

    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(path_to_files):
        os.makedirs(path_to_files)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    with open(file_path, 'wb') as new_file:
        new_file.write(downloaded_file)

    bot.send_message(chat_id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.",parse_mode="HTML")

@bot.message_handler(func=lambda message: message.text == reminders)
def move_to_reminds_menu(message):
    log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    chat_id = message.chat.id
    text = "<b>–í—ã –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>"
    files_menu = types.ReplyKeyboardMarkup()
    button_allreminds = types.KeyboardButton(all_reminds)
    button_new_remind = types.KeyboardButton(add_remind)
    button_delete_remind = types.KeyboardButton(delete_remind)

    button_comeback = types.KeyboardButton(comeback)
    files_menu.row(button_allreminds)
    files_menu.row(button_delete_remind, button_new_remind)
    files_menu.row(button_comeback)
    if str(chat_id) in whocanusebot:

        mesg = bot.send_message(chat_id=chat_id, text=text, reply_markup=files_menu, parse_mode="HTML")
        log(f"{message.from_user.username} –ø–µ—Ä–µ–º–µ—Å—Ç–∏–ª—Å—è –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    else:

        log(f"{message.from_user.username} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–æ –æ–Ω –æ—Ç—Å—É—Ç–≤—É–µ—Ç —Å—Ä–µ–¥–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return None

remind_name = ''
remindstart = ''
remind_duration = ''
when_toremind = ''
@bot.message_handler(func=lambda message: message.text == add_remind)
def move_to_reminds_menu(message):
    log(f"{message.from_user.username} –¥–æ–±–∞–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    global remind_name
    global remindstart
    global remind_duration
    global when_toremind



    chat_id = message.chat.id
    text = "<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥–ø–∏—Å–∫–∏</b>"
    mesg = bot.send_message(chat_id,text, parse_mode="HTML")
    bot.register_next_step_handler(mesg,question_date)



@bot.callback_query_handler(func=lambda call: call.data == "add_remind")
def deleteremind(call: types.CallbackQuery):
    log(f"{call.message.from_user.username} –¥–æ–±–∞–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    global remind_name
    global remindstart
    global remind_duration
    global when_toremind



    chat_id = call.message.chat.id
    text = "<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥–ø–∏—Å–∫–∏</b>"
    mesg = bot.send_message(chat_id,text, parse_mode="HTML")
    bot.register_next_step_handler(mesg,question_date)


@bot.message_handler(func=lambda message: message.text == add_remind)
def move_to_reminds_menu(message):
    log(f"{message.from_user.username} –¥–æ–±–∞–≤–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    global remind_name
    global remindstart
    global remind_duration
    global when_toremind



    chat_id = message.chat.id
    text = "<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–¥–ø–∏—Å–∫–∏</b>"
    mesg = bot.send_message(chat_id,text, parse_mode="HTML")
    bot.register_next_step_handler(mesg,question_date)

def question_date(message):
    global remind_name
    global remindstart
    global remind_duration
    global when_toremind
    msg_text = message.text
    remind_name = msg_text




    chat_id = message.chat.id
    text = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–î–î.–ú–ú.–ì–ì–ì–ì</b>:"
    mesg = bot.send_message(chat_id, text, parse_mode="HTML")
    bot.register_next_step_handler(mesg, question_duration)


def question_duration(message):
    global remind_name
    global remindstart
    global remind_duration
    global when_toremind
    chat_id = message.chat.id
    text = "<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:</b>"
    msg_text = message.text

    remindstart = dd_mm_yyyy_to_yyyy_mm_dd(msg_text)
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç—É
        datetime.datetime.strptime(remindstart, '%Y-%m-%d')
    except ValueError:
        text = "<b>–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑</b>"
        mesg = bot.send_message(chat_id, text, parse_mode="HTML",)
        bot.register_next_step_handler(mesg, question_duration)
        return None
    remind_duration_menu = types.ReplyKeyboardMarkup()
    button_3month = types.KeyboardButton("3 –º–µ—Å—è—Ü–∞")
    button_6month = types.KeyboardButton("6 –º–µ—Å—è—Ü–µ–≤")
    button_12month = types.KeyboardButton("12 –º–µ—Å—è—Ü–µ–≤")
    button_2year = types.KeyboardButton("2 –≥–æ–¥–∞")
    button_3year = types.KeyboardButton("3 –≥–æ–¥–∞")
    button_1day = types.KeyboardButton("1 –¥–µ–Ω—å")
    button_3day = types.KeyboardButton("3 –¥–Ω—è")
    button_1week = types.KeyboardButton("1 –Ω–µ–¥–µ–ª—è")

    remind_duration_menu.row(button_1day,button_3day,button_1week,button_3month)
    remind_duration_menu.row(button_6month, button_12month, button_2year, button_3year)
    mesg = bot.send_message(chat_id, text, parse_mode="HTML",reply_markup=remind_duration_menu)
    bot.register_next_step_handler(mesg, question_whenremind)


def question_whenremind(message):
    global remind_name
    global remindstart
    global remind_duration
    global when_toremind

    msg_text = message.text
    remind_duration = msg_text

    chat_id = message.chat.id
    text = "<b>–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏—è?</b>:"
    remind_duration_menu = types.ReplyKeyboardMarkup()
    button_1month = types.KeyboardButton("1 –º–µ—Å—è—Ü")
    button_2weeks = types.KeyboardButton("2 –Ω–µ–¥–µ–ª–∏")
    button_3day = types.KeyboardButton("3 –¥–Ω—è")
    remind_duration_menu.row(button_1month,button_2weeks,button_3day)
    mesg = bot.send_message(chat_id, text, parse_mode="HTML",reply_markup=remind_duration_menu)
    bot.register_next_step_handler(mesg, save_all)

def save_all(message):
    chat_id = message.chat.id

    global remind_name
    global remindstart
    global remind_duration
    global when_toremind
    msg_text = message.text
    when_toremind = msg_text
    mainbot_menu = types.ReplyKeyboardMarkup()
    button_network_map = types.KeyboardButton(network_map)
    button_cameras_List = types.KeyboardButton(cameraslist)
    button_tools = types.KeyboardButton(tools)
    button_reminds = types.KeyboardButton(reminders)
    button_files = types.KeyboardButton(files)
    button_list = types.KeyboardButton(commands_list)
    mainbot_menu.row(button_network_map)
    mainbot_menu.row(button_cameras_List, button_files)
    mainbot_menu.row(button_tools)
    mainbot_menu.row(button_reminds, button_list)

    remind_date = f"{calculate_reminder_date(remindstart,remind_duration,when_toremind)} 10:00"
    text = (f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:\n"
            f"–ò–º—è –ø–æ–¥–ø–∏—Å–∫–∏ <b>{remind_name}</b>\n"
            f"–î–∞—Ç–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è <b>{remindstart}</b>\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ <b>{remind_duration}</b>\n"
            f"–ù–∞–ø–æ–º–Ω–∏—Ç—å –∑–∞ : <b>{when_toremind}</b>\n")


    mesg = bot.send_message(chat_id, text, parse_mode="HTML",reply_markup=mainbot_menu)
    with open("reminds.txt","a+", encoding='utf-8') as file:
        file.write(f"{[remind_name,remindstart,remind_duration,when_toremind,remind_date,chat_id]}\n")


"""–í–°–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø"""
@bot.message_handler(func = lambda message: message.text == all_reminds)
def getallreminds(message):
    log(f"{message.from_user.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    text = "<b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
    chat_id = message.chat.id
    reminds_markup = types.InlineKeyboardMarkup()
    new_remind = types.InlineKeyboardButton(text=add_remind,callback_data="add_remind")
    del_remind = types.InlineKeyboardButton(text=delete_remind, callback_data="delete_remind")
    reminds_markup.row(new_remind,del_remind)
    with open ("reminds.txt" ,"r",encoding="utf-8") as file:
        for line in file:
            line = ast.literal_eval(line)
            text += f"\n<b>–°—Ç–∞—Ç—É—Å</b> :{remind_status(line[4])} / –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <b>{line[0]}</b>  <b>{line[2]}</b>  / –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ <b>{line[1]}</b> /  –Ω–∞–ø–æ–º–Ω—é –∑–∞ <b>{line[3]}</b>\n---------------------"
    mesg = bot.send_message(chat_id, text,parse_mode="HTML",reply_markup=reminds_markup)


"""–£–î–ê–õ–ò–¢–¨ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –†–ï–ü–õ–ò –ö–ù–û–ü–ö–û–ô """
@bot.message_handler(func = lambda message: message.text == delete_remind)
def deleteremindreminds(message):
    log(f"{call.message.from_user.username} —É–¥–∞–ª–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    text = "<b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
    chat_id = message.chat.id
    with open("reminds.txt", "r", encoding="utf-8") as file:
        for line in file:
            line = ast.literal_eval(line)
            text += f"\n–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <b>{line[0]}</b> / <b>{line[2]}</b>  / –Ω–∞–ø–æ–º–Ω—é –∑–∞ <b>{line[3]}</b>\n---------------------"
    mesg = bot.send_message(chat_id, text, parse_mode="HTML")
    mesg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", parse_mode="HTML")
    bot.register_next_step_handler(mesg , funcdeleteremind)

"""–£–î–ê–õ–ò–¢–¨ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ò–ù–õ–ê–ô–ù –ö–ù–û–ü–ö–û–ô """
@bot.callback_query_handler(func=lambda call: call.data == "delete_remind")
def deleteremind(call: types.CallbackQuery):
    log(f"{call.message.from_user.username} —É–¥–∞–ª–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    text = "<b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
    chat_id = call.message.chat.id
    with open("reminds.txt", "r", encoding="utf-8") as file:
        for line in file:
            line = ast.literal_eval(line)
            text += f"\n–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ <b>{line[0]}</b> / <b>{line[2]}</b>  / –Ω–∞–ø–æ–º–Ω—é –∑–∞ <b>{line[3]}</b>\n---------------------"
    mesg = bot.send_message(chat_id, text, parse_mode="HTML")
    mesg = bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", parse_mode="HTML")
    bot.register_next_step_handler(mesg , funcdeleteremind)


def funcdeleteremind(message):
    chat_id = message.chat.id
    msg_text = message.text
    list = []
    with open("reminds.txt", "r", encoding="utf-8") as file:
        for line in file:
            line = ast.literal_eval(line)
            list.append(line)
        for sub in list:
            if sub[0] == msg_text:

                list.remove(sub)
        with open("reminds.txt", "w", encoding="utf-8") as file:
            for newsub in list:
                file.write(f"{newsub}\n")
        bot.send_message(chat_id,text=f"–ü–æ–¥–ø–∏—Å–∫–∞ {msg_text} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")



def check_reminds():
    while True:
        now = datetime.datetime.now()  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É
        current_date_time = now.strftime("%Y-%m-%d %H:%M")
        with open("reminds.txt" ,"r+" , encoding="utf-8",errors='ignore') as file :
            for line in file:
                line = ast.literal_eval(line)
                if current_date_time == line[4]:
                    bot.send_message(chat_id=line[5], text=f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {line[0]} –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑: {line[3]}")
                    sleep(60)


threading.Thread(target=check_reminds).start()


@bot.message_handler(func = lambda message: message.text == commands_list)
def say_commands(message):

    chat_id = message.chat.id
    text = ("/get_problems ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –∏–∑ –∑–∞–±–±–∏–∫—Å\n"
            "/get_weather ‚Äì –ø–æ–∫–∞–∂–µ—Ç –ø–æ–≥–æ–¥—É –≤ –≠–Ω–≥–µ–ª—å—Å–µ\n"
            "/get_screen ‚Äì –ø–æ–∫–∞–∂–µ—Ç –ø–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –í–ú –±–æ—Ç–∞\n"
            "/show_bot_uptime ‚Äì –ø–æ–∫–∞–∂–µ—Ç –∞–ø—Ç–∞–π–º –≤–∏—Ä—Ç—É–∞–ª–∫–∏ —Å –±–æ—Ç–æ–º\n"
            "/get_alpha_uptime ‚Äì –ø–æ–∫–∞–∂–µ—Ç –∞–ø—Ç–∞–π–º –≥–ª–∞–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞\n"
            "/get_doc ‚Äì –≤—ã–ø–ª—é–Ω–µ—Ç —Ñ–∞–π–ª —Å —Ç–µ—Ö–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π\n"
            "/get_log ‚Äì –ø–æ–∫–∞–∂–µ—Ç –ª–æ–≥ —Ñ–∞–π–ª –±–æ—Ç–∞\n"
            "/reboot ‚Äì –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç –≤–∏—Ä—Ç—É–∞–ª–∫—É —Å –±–æ—Ç–æ–º\n"
            "/about ‚Äì –ø–æ–∫–∞–∂–µ—Ç –∏–Ω—Ñ—É –æ –±–æ—Ç–µ\n"
            "/get_keys - —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π")
    bot.send_message(chat_id, text)
    log(f"{message.from_user.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥")


@bot.message_handler(commands = ["get_problems"])
def send_problems_from_zabbix(message):

    chat_id = message.chat.id
    problems = get_problems_from_zabbix()
    problemscount = 0
    probl = ""
    for i in problems.keys():
        problemscount +=1
        probl += f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <b>{i}</b>\n"
        probl += (f"{problems[i][1]}\n"
                 f"–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ —Å: <b>{unix_to_jata(problems[i][0])}</b>\n"
                 f"----------------\n")
    text = f"–ü—Ä–æ–±–ª–µ–º –≤ Zabbix <b>{problemscount}</b>\n\n"
    text += probl
    if str(chat_id) in whocanusebot:
        bot.send_message(chat_id, text,parse_mode="HTML")
        log(f"{message.from_user.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –ø—Ä–æ–±–ª–µ–º—ã –∏–∑ zabbix")


@bot.message_handler(commands  =["get_weather"])
def send_weatherofcity(message):

    chat_id = message.chat.id
    text = weather()
    if str(chat_id) in whocanusebot:
        bot.send_message(chat_id, text)
        log(f"{message.from_user.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –ø–æ–≥–æ–¥—É")

@bot.message_handler(commands = ["get_screen"])
def desktop_send(message):

    chat_id = message.chat.id
    myScreenshot = pyautogui.screenshot()

    myScreenshot.save(r'desktop.png')
    with open("desktop.png", "rb") as desktop:
        if str(chat_id) in whocanusebot:
            bot.send_photo(chat_id,
                           photo=desktop)
            log(f"{message.from_user.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–æ–ª–∞")

@bot.message_handler(func=lambda message: message.text == network_map)
def desktop_send(message):

    chat_id = message.chat.id
    myScreenshot = pyautogui.screenshot(region=(20,90, 1150,885))

    myScreenshot.save(r'desktop.png')
    with open("desktop.png", "rb") as desktop:
        if str(chat_id) in whocanusebot:
            bot.send_photo(chat_id,
                           photo=desktop)
            log(f"{message.from_user.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Å–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç–æ–ª–∞")

@bot.message_handler(commands = ["show_bot_uptime"])
def send_uptime(message):

    chat_id = message.chat.id
    text = str(get_uptime())[0:8]
    if str(chat_id) in whocanusebot:
        bot.send_message(chat_id, text)
        log(f"{message.from_user.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∞–ø—Ç–∞–π–º –±–æ—Ç–∞")

@bot.message_handler(commands = ["get_alpha_uptime"])
def send_uptime(message):

    chat_id = message.chat.id
    text = getmainserveruptime()
    if str(chat_id) in whocanusebot:
        bot.send_message(chat_id, text)
        log(f"{message.from_user.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –∞–ø—Ç–∞–π–º –≥–ª–∞–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")

@bot.message_handler(commands = ["get_log"])
def logsend(message):
    chat_id = message.chat.id
    if str(chat_id) in whocanusebot:
        bot.send_document(chat_id,document=open("botlog.log"))
        log(f"{message.from_user.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª –ª–æ–≥ —Ñ–∞–π–ª –±–æ—Ç–∞ ")
@bot.message_handler(commands = ["about"])
def logsend(message):
    chat_id = message.chat.id
    if str(chat_id) in whocanusebot:
        bot.send_document(chat_id,document=open("about.txt"))
        log(f"{message.from_user.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª about ")


@bot.message_handler(commands=["get_keys"])
def logsend(message):
    chat_id = message.chat.id
    text = ""
    with open("keys.txt", "r") as file:
        for i in file:
            text += f"{i}\n"
        bot.send_message(chat_id,text)
    log(f"{message.from_user.username} –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Ñ–∞–π–ª —Å –∫–ª—é—á–∞–º–∏  ")
@bot.message_handler(commands=["reboot"])
def logsend(message):
    chat_id = message.chat.id
    if str(chat_id) in whocanusebot:
        mesg = bot.send_message(chat_id,'–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å')
        bot.register_next_step_handler(mesg,reset)

def reset(message):
    if message.text == "Trustno1!@#":
        os.system("shutdown /r /t 0")


while True:

    try:
        bot.polling(none_stop=True)
    except Exception as _ex:
        log(_ex)
        traceback.print_exc()

        print(_ex)

#endofcode